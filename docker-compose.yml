version: '3.8'

services:
  frontend:
    build: ./frontend
    container_name: tickets-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://backend:3000
    depends_on:
      - backend
    networks:
      - tickets-network
    labels:
      - "com.dynatrace.monitoring=true"
      - "com.dynatrace.service=frontend"

  backend:
    build: ./backend
    container_name: tickets-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_NAME=${DB_NAME:-tickets_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - DT_CUSTOM_PROP=service=backend   # tag extra para Dynatrace
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tickets-network
    labels:
      - "com.dynatrace.monitoring=true"
      - "com.dynatrace.service=backend"

  db:
    build: ./database
    container_name: tickets-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-tickets_db}
      - DT_CUSTOM_PROP=service=db   # tag extra para Dynatrace
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tickets-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.dynatrace.monitoring=true"
      - "com.dynatrace.service=database"

networks:
  tickets-network:
    driver: bridge

volumes:
  postgres_data: